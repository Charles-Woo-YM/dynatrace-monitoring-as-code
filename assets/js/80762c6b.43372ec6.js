"use strict";(self.webpackChunkmonaco=self.webpackChunkmonaco||[]).push([[2428],{3905:(e,n,o)=>{o.d(n,{Zo:()=>s,kt:()=>u});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function p(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},s=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(o),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return o?t.createElement(f,i(i({ref:n},s),{},{components:o})):t.createElement(f,i({ref:n},s))}));function u(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<a;c++)i[c]=o[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},2728:(e,n,o)=>{o.r(n),o.d(n,{default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=o(7462),r=(o(7294),o(3905));const a={sidebar_position:2},i={unversionedId:"commands/deploying-projects",id:"version-1.8.1/commands/deploying-projects",isDocsHomePage:!1,title:"Deploy projects",description:"The Monaco tool can deploy a configuration or a set of configurations in the form of projects.",source:"@site/versioned_docs/version-1.8.1/commands/deploying-projects.md",sourceDirName:"commands",slug:"/commands/deploying-projects",permalink:"/dynatrace-monitoring-as-code/commands/deploying-projects",editUrl:"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code/edit/main/documentation/versioned_docs/version-1.8.1/commands/deploying-projects.md",version:"1.8.1",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Validating configuration",permalink:"/dynatrace-monitoring-as-code/commands/validating-configuration"},next:{title:"Experimental New CLI",permalink:"/dynatrace-monitoring-as-code/commands/experimental-new-cli"}},p=[{value:"Running the tool",id:"running-the-tool",children:[]}],l={toc:p};function c(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Monaco")," tool can deploy a configuration or a set of configurations in the form of projects.\nA project is a folder containing files that define the configurations to be deployed to an environment or a group of environments.\nThis is done by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"--project")," flag (or ",(0,r.kt)("inlineCode",{parentName:"p"},"-p")," for short)."),(0,r.kt)("h2",{id:"running-the-tool"},"Running the tool"),(0,r.kt)("p",null,"Below you find a few samples on how to run the tool to deploy your configurations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# Deploy all projects in the current folder to all environments\nmonaco -e=environments.yaml\n\n# Deploy projects-root-folder/project and any projects in projects-root-folder it depends on to all environments\nmonaco -e=environments.yaml -p="project" projects-root-folder\n\n# Deploy projects-root-folder/projectA, projectB and dependencies to all environments\nmonaco -e=environments.yaml -p="projectA, projectB" projects-root-folder\n\n# Deploy all projects in the current folder to the "dev" environment defined in environments.yaml\nmonaco -e=environments.yaml -se dev\n')),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," contains additional sub-projects, all projects are deployed recursively. If ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," depends on different projects under the same root,\nthose are also deployed."),(0,r.kt)("p",null,"Multiple projects can be specified by ",(0,r.kt)("inlineCode",{parentName:"p"},'-p="projectA, projectB, projectC/subproject"'),"."),(0,r.kt)("p",null,"To deploy the configuration, ",(0,r.kt)("inlineCode",{parentName:"p"},"Monaco")," needs a valid API Token(s) for each environment.\nThese are defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"environment variables"),"; you can define the name of that env var in the environments file that is specified as an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"-e")," option."),(0,r.kt)("p",null,"To deploy to a specific environment within an ",(0,r.kt)("inlineCode",{parentName:"p"},"environments.yaml")," file, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-specific-environment")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-se")," flag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'monaco -e=environments.yaml -se=my-environment -p="my-environment" cluster\n')))}c.isMDXComponent=!0}}]);